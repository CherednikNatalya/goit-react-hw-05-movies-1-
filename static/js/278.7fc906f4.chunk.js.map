{"version":3,"file":"static/js/278.7fc906f4.chunk.js","mappings":"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","sources":["pages/Movies/Movies.jsx","services/API.js","services/status.js"],"sourcesContent":["import Notiflix from 'notiflix';\nimport { useState, useEffect } from \"react\";\n\n\nimport {fetchSearchMovies} from '../../services/API'\nimport STATUS from '../../services/status'\nimport Loader from '../../components/Loader/Loader'\n\nimport { Link, useLocation, useSearchParams } from \"react-router-dom\";\nimport { Btn, Form, Input, Section, List, TitleMovie,Item , Title } from './Movies.styled'\n\nNotiflix.Notify.init({\n\twidth: '400px',\n\tfontSize: '15px',\n});\n\n\nconst Movies = () => {\n\n    const [status, setStatus] =useState(STATUS.idle)\n    const [searchParams, setSearchParams] = useSearchParams();\n    const [movies, setMovies] = useState([])\n  \n    const searchName = searchParams.get('query');\n\tconst location = useLocation();\n\n\tconst handleSubmit = e => {\n\t\te.preventDefault();\n\t\tconst { value } = e.target.elements.search;\n\t\tif (value === '') {\n\t\t\tNotiflix.Notify.info('Please, fill in the search field!');\n\t\t}\n\t\tsetMovies([]);\n\t\tsetSearchParams({ query: value });\n\t};\n\n\tuseEffect(() => {\n\t\tif (!searchName) return;\n\t\tif (searchName === '') return;\n\t\tconst getMovies = async () => {\n\t\t\tsetStatus(STATUS.pending);\n\t\t\ttry {\n\t\t\t\tconst data = await fetchSearchMovies(searchName);\n\t\t\t\tonResolve(data);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.log(error);\n\t\t\t\tsetStatus(STATUS.error);\n\t\t\t}\n\t\t};\n\t\tgetMovies();\n\t}, [searchName]);\n\n\tconst onResolve = data => {\n\t\tif (data.length === 0) {\n\t\t\tNotiflix.Notify.failure(\n\t\t\t\t'Sorry, there are no images matching your search query. Please try again.'\n\t\t\t);\n\t\t\tsetStatus(STATUS.idle);\n\t\t\treturn;\n\t\t}\n\t\tconst movie = data.map(({ id, poster_path, original_title }) => ({\n\t\t\tid,\n\t\t\timg: poster_path,\n\t\t\ttitle: original_title,\n\t\t}));\n\t\tsetMovies(movie);\n\t\tsetStatus(STATUS.success);\n\t};\n\n   \n  return (\n\t\t<Section>\n\t\t\t<Form onChange={handleSubmit}>\n\t\t\t\t<Input type=\"text\" \n        name=\"search\" \n        placeholder=\"Enter movie name\" \n        autofocus\n        autoComplete=\"off\" />\n\t\t\t\t<Btn type=\"submit\">Search</Btn>\n\t\t\t</Form>\n\t\t\t{/* {status === STATUS.error && <NotFound>NOT FOUND</NotFound>} */}\n\t\t\t{status === STATUS.pending && <Loader/>}\n\t\t\t{status === STATUS.success && (\n\t\t\t\t<>\n\t\t\t\t\t<Title>Search results</Title>\n          <List>\n\t\t\t{movies.map(({ id, title }) => (\n\t\t\t\t<Item key={id}>\n\t\t\t\t\t<Link to={`movies/${id}`} state={{ from: location }}>\t\n\t\t\t\t\t\t<TitleMovie>{title}</TitleMovie>\n\t\t\t\t\t</Link>\n\t\t\t\t</Item>\n\t\t\t))}\n\t\t</List>\n\t\t\t\t</>\n\t\t\t)}\n\t\t</Section>\n\t);\n\n}\n\n\nexport default Movies","import axios from 'axios';\n\nconst API_KEY = 'b52f4a97df843a5ead1cf8ccfba387fd';\nconst moviesApi = axios.create({\n\tbaseURL: 'https://api.themoviedb.org/3/',\n});\n\nexport const fetchTrendingMovies = async () => {\n\tconst {\n\t\tdata: { results },\n\t} = await moviesApi.get(`trending/movie/day`, {\n\t\tparams: {\n\t\t\tapi_key: API_KEY,\n\t\t},\n\t});\n\treturn results;\n};\n\n\nexport const fetchSearchMovies = async searchName => {\n\tconst {\n\t\tdata: { results },\n\t} = await moviesApi.get(`search/movie`, {\n\t\tparams: {\n\t\t\tapi_key: API_KEY,\n\t\t\tquery: searchName,\n\t\t},\n\t});\n\treturn results;\n};\n\nexport const fetchMovieDetailsById = async movieId => {\n\tconst { data } = await moviesApi.get(`movie/${movieId}`, {\n\t\tparams: {\n\t\t\tapi_key: API_KEY,\n\t\t},\n\t});\n\treturn data;\n};\n\nexport const fetchCastById = async movieId => {\n\tconst {\n\t\tdata: { cast },\n\t} = await moviesApi.get(`movie/${movieId}/credits`, {\n\t\tparams: {\n\t\t\tapi_key: API_KEY,\n\t\t},\n\t});\n\treturn cast;\n};\n\nexport const fetchReviewsById = async movieId => {\n\tconst {\n\t\tdata: { results },\n\t} = await moviesApi.get(`movie/${movieId}/reviews`, {\n\t\tparams: {\n\t\t\tapi_key: API_KEY,\n\t\t},\n\t});\n\treturn results;\n};","const STATUS = {\n    idle: 'idle',\n    pending: 'pending',\n    success: 'success',\n    error: 'error',\n  };\n\n  export default STATUS"],"names":["Notiflix","width","fontSize","useState","STATUS","status","setStatus","useSearchParams","searchParams","setSearchParams","movies","setMovies","searchName","get","location","useLocation","useEffect","getMovies","fetchSearchMovies","data","onResolve","console","log","length","movie","map","id","img","poster_path","title","original_title","Section","Form","onChange","e","preventDefault","value","target","elements","search","query","Input","type","name","placeholder","autofocus","autoComplete","Btn","Title","List","Item","to","state","from","TitleMovie","API_KEY","moviesApi","axios","baseURL","fetchTrendingMovies","params","api_key","results","fetchMovieDetailsById","movieId","fetchCastById","cast","fetchReviewsById","idle","pending","success","error"],"sourceRoot":""}