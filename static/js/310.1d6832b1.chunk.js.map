{"version":3,"file":"static/js/310.1d6832b1.chunk.js","mappings":"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","sources":["components/TrendingList/TrendingList.styled.js","pages/Movies/Movies.styled.js","pages/Movies/Movies.jsx","services/API.js","services/status.js"],"sourcesContent":["import styled from 'styled-components';\n\n\n\nexport const List = styled.ul`\n\tdisplay: flex;\n\tflex-wrap: wrap;\n\tcolumn-gap: 20px;\n\trow-gap: 40px;\n`;\n\nexport const Item = styled.li`\n\twidth: 232px;\n`;\n\nexport const ImageBox = styled.div`\n\theight: 350px;\n\timg {\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\tborder-radius: 10px;\n\t}\n`;\n\nexport const TitleMovie = styled.h2`\n\tfont-weight: 600;\n\tmargin-top: 8px;\n\tline-height: 1.5;\n\tpadding-right: 10px;\n\twhite-space: nowrap;\n\toverflow: hidden;\n\ttext-overflow: ellipsis;\n`;\n\n\n","import styled from 'styled-components';\n\nexport const Form = styled.form`\n\tmargin-bottom: 40px;\n`;\n\nexport const Input = styled.input`\n\tbackground-color: var(--lightGray);\n\twidth: 500px;\n\theight: 50px;\n\tfont-weight: 500;\n\tcolor: var(--gray);\n\tpadding: 0 20px;\n\tcaret-color: var(--gray);\n\tmargin-right: 10px;\n\tborder-radius: 7px;\n`;\n\nexport const Btn = styled.button`\n\tdisplay: inline-block;\n\tpadding: 0 30px;\n\theight: 50px;\n\tborder-radius: 7px;\n\tbackground-color: var(--secondary);\n\tcolor: #fff;\n\tborder: 1px solid var(--lightGray);\n\ttransition: all var(--anim);\n\t&:hover {\n\t\tbackground-color: var(--lightGray);\n\t\tcolor: var(--primary);\n\t\tborder-color: var(--secondary);\n\t}\n`;\n\n\nexport const Section = styled.section`\npadding: 30px 0;\n`;\n\nexport const Title = styled.h1`\nfont-weight: 600;\nfont-size: 26px;\nwhite-space: nowrap;\ndisplay: flex;\nalign-items: center;\nflex-direction: row;\ncolumn-gap: 20px;\nmargin-bottom: 25px;\n\n`;\n\n\n","import Notiflix from 'notiflix';\nimport { useState, useEffect } from \"react\";\n\n\nimport {fetchSearchMovies} from '../../services/API'\nimport STATUS from '../../services/status'\nimport Loader from '../../components/Loader/Loader'\n\nimport { Link, useLocation, useSearchParams } from \"react-router-dom\";\nimport { Btn, Form, Input, Section, Title } from './Movies.styled'\nimport {List, TitleMovie, Item} from '../../components/TrendingList/TrendingList.styled'\nimport {ImageBox} from '../../components/TrendingList/TrendingList.styled'\nimport imageReplace from '../../images/poster-not-found.jpg'\n\n\nNotiflix.Notify.init({\n\twidth: '400px',\n\tfontSize: '15px',\n});\n\n\nconst Movies = () => {\n\n    const [status, setStatus] =useState(STATUS.idle)\n    const [searchParams, setSearchParams] = useSearchParams();\n    const [movies, setMovies] = useState([])\n  \n    const searchName = searchParams.get('search');\n\tconst location = useLocation();\n\n\tconst handleSubmit = e => {\n\t\te.preventDefault();\n\t\tconst { value } = e.target.elements.search;\n\t\tif (value === '') {\n\t\t\tNotiflix.Notify.info('Please, fill in the search field!');\n\t\t}\n\t\tsetMovies([]);\n\t\tsetSearchParams({ query: value });\n\t};\n\n\tuseEffect(() => {\n\t\tif (!searchName) return;\n\t\tif (searchName === '') return;\n\t\tconst getMovies = async () => {\n\t\t\tsetStatus(STATUS.pending);\n\t\t\ttry {\n\t\t\t\tconst data = await fetchSearchMovies(searchName);\n\t\t\t\tonResolve(data);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.log(error);\n\t\t\t\tsetStatus(STATUS.error);\n\t\t\t}\n\t\t};\n\t\tgetMovies();\n\t}, [searchName]);\n\n\tconst onResolve = data => {\n\t\tif (data.length === 0) {\n\t\t\tNotiflix.Notify.failure(\n\t\t\t\t'Sorry, there are no images matching your search query. Please try again.'\n\t\t\t);\n\t\t\tsetStatus(STATUS.idle);\n\t\t\treturn;\n\t\t}\n\t\tconst movie = data.map(({ id, poster_path, original_title }) => ({\n\t\t\tid,\n\t\t\timg: poster_path,\n\t\t\ttitle: original_title,\n\t\t}));\n\t\tsetMovies(movie);\n\t\tsetStatus(STATUS.success);\n\t};\n\n   \n  return (\n\t\t<Section>\n\t\t\t<Form onChange={handleSubmit}>\n\t\t\t\t<Input type=\"text\" \n        name=\"search\" \n        placeholder=\"Enter movie name\" \n\n        autoComplete=\"off\" />\n\t\t\t\t<Btn type=\"submit\">Search</Btn>\n\t\t\t</Form>\n\t\t\t\n\t\t\t{status === STATUS.pending && <Loader/>}\n\t\t\t{status === STATUS.success && (\n\t\t\t\t<>\n\t\t\t\t\t<Title>Search results</Title>\n          <List>\n\t\t\t{movies && movies.map(({ id, img, title}) => (\n\t\t\t\t<Item key={id}>\n\t\t\t\t\t<Link to={`${id}`} state={{ from: location }}>\n\t\t\t\t\t<ImageBox>\n\t\t\t\t\t\t\t\t\t\t\t{img ? (\n\t\t\t\t\t\t\t\t\t\t\t\t<img src={`https://image.tmdb.org/t/p/w500` + img} alt={title} width={232} height={350} />\n\t\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\t\t<img src={imageReplace} alt=\"Plug\" width={232} height={350} />\n\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t</ImageBox>\t\n\t\t\t\t\t\t<TitleMovie>{title}</TitleMovie>\n\t\t\t\t\t</Link>\n\t\t\t\t</Item>\n\t\t\t))}\n\t\t</List>\n\t\t\t\t</>\n\t\t\t)}\n\t\t</Section>\n\t);\n\n}\n\n\nexport default Movies","import axios from 'axios';\n\nconst API_KEY = 'b52f4a97df843a5ead1cf8ccfba387fd';\nconst moviesApi = axios.create({\n\tbaseURL: 'https://api.themoviedb.org/3/',\n});\n\nexport const fetchTrendingMovies = async () => {\n\tconst {\n\t\tdata: { results },\n\t} = await moviesApi.get(`trending/movie/day`, {\n\t\tparams: {\n\t\t\tapi_key: API_KEY,\n\t\t},\n\t});\n\treturn results;\n};\n\n\nexport const fetchSearchMovies = async searchName => {\n\tconst {\n\t\tdata: { results },\n\t} = await moviesApi.get(`search/movie`, {\n\t\tparams: {\n\t\t\tapi_key: API_KEY,\n\t\t\tquery: searchName,\n\t\t},\n\t});\n\treturn results;\n};\n\nexport const fetchMovieDetailsById = async movieId => {\n\tconst { data } = await moviesApi.get(`movie/${movieId}`, {\n\t\tparams: {\n\t\t\tapi_key: API_KEY,\n\t\t},\n\t});\n\treturn data;\n};\n\nexport const fetchCastById = async movieId => {\n\tconst {\n\t\tdata: { cast },\n\t} = await moviesApi.get(`movie/${movieId}/credits`, {\n\t\tparams: {\n\t\t\tapi_key: API_KEY,\n\t\t},\n\t});\n\treturn cast;\n};\n\nexport const fetchReviewsById = async movieId => {\n\tconst {\n\t\tdata: { results },\n\t} = await moviesApi.get(`movie/${movieId}/reviews`, {\n\t\tparams: {\n\t\t\tapi_key: API_KEY,\n\t\t},\n\t});\n\treturn results;\n};","const STATUS = {\n    idle: 'idle',\n    pending: 'pending',\n    success: 'success',\n    error: 'error',\n  };\n\n  export default STATUS"],"names":["List","styled","Item","ImageBox","TitleMovie","Form","Input","Btn","Section","Title","Notiflix","width","fontSize","useState","STATUS","status","setStatus","useSearchParams","searchParams","setSearchParams","movies","setMovies","searchName","get","location","useLocation","useEffect","getMovies","fetchSearchMovies","data","onResolve","console","log","length","movie","map","id","img","poster_path","title","original_title","onChange","e","preventDefault","value","target","elements","search","query","type","name","placeholder","autoComplete","Loader","to","state","from","src","alt","height","imageReplace","API_KEY","moviesApi","axios","baseURL","fetchTrendingMovies","params","api_key","results","fetchMovieDetailsById","movieId","fetchCastById","cast","fetchReviewsById","idle","pending","success","error"],"sourceRoot":""}