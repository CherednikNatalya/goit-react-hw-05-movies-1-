{"version":3,"file":"static/js/40.32f3de79.chunk.js","mappings":"+RAEaA,EAAOC,EAAAA,GAAAA,GAAH,uFAMJC,EAAOD,EAAAA,GAAAA,EAAH,yFAMJE,EAAOF,EAAAA,GAAAA,EAAH,wF,mBC4CjB,EA/Ce,WACX,OAA8BG,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA4BF,EAAAA,EAAAA,UAASG,EAAAA,EAAAA,MAArC,eAAOC,EAAP,KAAeC,EAAf,KACOC,GAAUC,EAAAA,EAAAA,MAAVD,SAEPE,EAAAA,EAAAA,YAAW,WACP,IAAMC,EAAU,mCAAG,WAAMC,GAAN,8EACfL,EAAUF,EAAAA,EAAAA,SADK,mBAGMQ,EAAAA,EAAAA,IAAiBL,GAHvB,OAGNM,EAHM,OAKZC,EAAUD,GALE,gDAOXE,QAAQC,IAAR,MACAV,EAAUF,EAAAA,EAAAA,OARC,yDAAH,sDAWhBM,EAAWH,EACd,GAAE,CAACA,IAEJ,IAAMO,EAAY,SAAAD,GACd,IAAMI,EAAcJ,EAAKK,KAAI,kBAA6B,CACtDC,GADyB,EAAGA,GAE5BC,OAFyB,EAAOA,OAGhCC,QAHyB,EAAeA,QAAf,IAK7BlB,EAAWc,GACXX,EAAUF,EAAAA,EAAAA,QACb,EAED,OACJ,gCACSC,IAAWD,EAAAA,EAAAA,UAAkB,SAACkB,EAAA,EAAD,IAC7BjB,IAAWD,EAAAA,EAAAA,SAAoC,IAAlBF,EAAQqB,QAAe,sEACpD,SAAC1B,EAAD,UACIK,EAAQgB,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACT,2BACI,UAACtB,EAAD,sBAAeqB,MACf,SAACpB,EAAD,UAAOqB,MAFFF,EADA,QAUxB,C,mMCtDKK,EAAU,mCACVC,EAAYC,EAAAA,EAAAA,OAAa,CAC9BC,QAAS,kCAGGC,EAAmB,mCAAG,sGAGxBH,EAAUI,IAAV,qBAAoC,CAC7CC,OAAQ,CACPC,QAASP,KALuB,uBAEzBQ,EAFyB,EAEjCnB,KAAQmB,QAFyB,kBAQ3BA,GAR2B,2CAAH,qDAYnBC,EAAiB,mCAAG,WAAMC,GAAN,yFAGtBT,EAAUI,IAAV,eAA8B,CACvCC,OAAQ,CACPC,QAASP,EACTb,MAAOuB,KANuB,uBAEvBF,EAFuB,EAE/BnB,KAAQmB,QAFuB,kBASzBA,GATyB,2CAAH,sDAYjBG,EAAqB,mCAAG,WAAM5B,GAAN,yFACbkB,EAAUI,IAAV,gBAAuBtB,GAAW,CACxDuB,OAAQ,CACPC,QAASP,KAHyB,uBAC5BX,EAD4B,EAC5BA,KAD4B,kBAM7BA,GAN6B,2CAAH,sDASrBuB,EAAa,mCAAG,WAAM7B,GAAN,yFAGlBkB,EAAUI,IAAV,gBAAuBtB,EAAvB,YAA0C,CACnDuB,OAAQ,CACPC,QAASP,KALiB,uBAEnBa,EAFmB,EAE3BxB,KAAQwB,KAFmB,kBAQrBA,GARqB,2CAAH,sDAWbzB,EAAgB,mCAAG,WAAML,GAAN,yFAGrBkB,EAAUI,IAAV,gBAAuBtB,EAAvB,YAA0C,CACnDuB,OAAQ,CACPC,QAASP,KALoB,uBAEtBQ,EAFsB,EAE9BnB,KAAQmB,QAFsB,kBAQxBA,GARwB,2CAAH,qD,qBC5C3B,IAPa,CACXM,KAAM,OACNC,QAAS,UACTC,QAAS,UACTC,MAAO,Q","sources":["pages/MovieDetails/Reviews/Reviews.styled.js","pages/MovieDetails/Reviews/Reviews.jsx","services/API.js","services/status.js"],"sourcesContent":["import styled  from \"styled-components\";\n\nexport const List = styled.ul`\n\tdisplay: flex;\n\tflex-direction: column;\n\trow-gap: 30px;\n`;\n\nexport const Name = styled.p`\n\tfont-weight: 600;\n\tfont-size: 18px;\n\tmargin-bottom: 10px;\n`;\n\nexport const Text = styled.p`\n\tfont-size: 14px;\n\tline-height: 1.4;\n\tcolor: var(--gray);\n`;\n","import { useState, useEffect } from \"react\";\nimport { useParams} from 'react-router-dom'\n\nimport {fetchReviewsById} from 'services/API'\nimport STATUS from 'services/status'\n\n\nimport { List, Name, Text} from './Reviews.styled'\nimport Loader from 'components/Loader/Loader'\n\n\nconst Reviews =()=>{\n    const [reviews, setReviews] = useState([]);\n    const [status, setStatus] = useState(STATUS.idle);\n    const {movieId} =useParams()\n\n    useEffect (()=>{\n        const getReviews = async query => {\n            setStatus(STATUS.pending)\n            try {\n               const data =await fetchReviewsById(movieId)\n              \n               onResolve(data) \n            } catch (error) {\n                console.log(error);\n                setStatus(STATUS.error); \n            }\n        }\n        getReviews(movieId)\n    }, [movieId])\n    \n    const onResolve = data => {\n        const dataReviews = data.map(({ id, author, content}) => ({\n            id, \n            author, \n            content\n        }));\n        setReviews(dataReviews);\n        setStatus(STATUS.success);\n    }\n    \n    return (\n<>\n        {status === STATUS.pending && <Loader />}\n        {status === STATUS.success && reviews.length ===0 ? (<p>We don't have any reviews for this movies</p>) :\n        (<List>\n            {reviews.map(({ id, author, content }) => (\n                <li key={id}>\n                    <Name>Author: {author}</Name>\n                    <Text>{content}</Text>\n                </li>\n            ))}\n        </List> \n        )}\n     </>\n    )\n}\n\nexport default Reviews","import axios from 'axios';\n\nconst API_KEY = 'b52f4a97df843a5ead1cf8ccfba387fd';\nconst moviesApi = axios.create({\n\tbaseURL: 'https://api.themoviedb.org/3/',\n});\n\nexport const fetchTrendingMovies = async () => {\n\tconst {\n\t\tdata: { results },\n\t} = await moviesApi.get(`trending/movie/day`, {\n\t\tparams: {\n\t\t\tapi_key: API_KEY,\n\t\t},\n\t});\n\treturn results;\n};\n\n\nexport const fetchSearchMovies = async searchName => {\n\tconst {\n\t\tdata: { results },\n\t} = await moviesApi.get(`search/movie`, {\n\t\tparams: {\n\t\t\tapi_key: API_KEY,\n\t\t\tquery: searchName,\n\t\t},\n\t});\n\treturn results;\n};\n\nexport const fetchMovieDetailsById = async movieId => {\n\tconst { data } = await moviesApi.get(`movie/${movieId}`, {\n\t\tparams: {\n\t\t\tapi_key: API_KEY,\n\t\t},\n\t});\n\treturn data;\n};\n\nexport const fetchCastById = async movieId => {\n\tconst {\n\t\tdata: { cast },\n\t} = await moviesApi.get(`movie/${movieId}/credits`, {\n\t\tparams: {\n\t\t\tapi_key: API_KEY,\n\t\t},\n\t});\n\treturn cast;\n};\n\nexport const fetchReviewsById = async movieId => {\n\tconst {\n\t\tdata: { results },\n\t} = await moviesApi.get(`movie/${movieId}/reviews`, {\n\t\tparams: {\n\t\t\tapi_key: API_KEY,\n\t\t},\n\t});\n\treturn results;\n};","const STATUS = {\n    idle: 'idle',\n    pending: 'pending',\n    success: 'success',\n    error: 'error',\n  };\n\n  export default STATUS"],"names":["List","styled","Name","Text","useState","reviews","setReviews","STATUS","status","setStatus","movieId","useParams","useEffect","getReviews","query","fetchReviewsById","data","onResolve","console","log","dataReviews","map","id","author","content","Loader","length","API_KEY","moviesApi","axios","baseURL","fetchTrendingMovies","get","params","api_key","results","fetchSearchMovies","searchName","fetchMovieDetailsById","fetchCastById","cast","idle","pending","success","error"],"sourceRoot":""}