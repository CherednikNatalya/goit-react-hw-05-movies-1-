{"version":3,"file":"static/js/811.f0d39874.chunk.js","mappings":"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","sources":["pages/MovieDetails/Cast/Cast.styled.js","pages/MovieDetails/Cast/Cast.jsx","services/API.js","services/status.js"],"sourcesContent":["import styled from 'styled-components';\n\n\n\nexport const ImgBox = styled.div`\n\theight: 175px;\n\timg {\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\tborder-radius: 10px;\n\t}\n`;\n\nexport const Content = styled.div`\n\tflex: 60%;\n`;\n\nexport const Title = styled.h2`\n\tfont-weight: 60;\n\tline-height: 1.2;\n\tfont-size: 30px;\n\tmargin-bottom: 30px;\n`;\n\nexport const List = styled.ul`\n\tmargin-bottom: 40px;\n`;\n\nexport const Item = styled.li`\n\tdisplay: flex;\n\talign-items: center;\n\tcolumn-gap: 50px;\n\tfont-size: 15px;\n\t&:not(:last-child) {\n\t\t\tmargin-bottom: 10px;\n\t}\n`;\n\nexport const Name = styled.p`\n\tmin-width: 100px;\n\tcolor: var(--gray);\n`;\n\nexport const Value = styled.p`\n\tspan {\n\t\tdisplay: inline-block;\n\t\ttext-align: center;\n\t\tborder-radius: 8px;\n\t\tline-height: 1.2;\n\t\twidth: 50px;\n\t\tborder: 2px solid var(--secondary);\n\t}\n`;\n\nexport const Overview = styled.b`\n\tdisplay: block;\n\tfont-size: 18px;\n\tmargin-bottom: 15px;\n`;\n\nexport const Text = styled.p`\n\tfont-size: 15px;\n\tline-height: 1.3;\n`;\n\nexport const BtnList = styled.ul`\n\tdisplay: flex;\n\talign-items: center;\n\tcolumn-gap: 30px;\n\tmargin-bottom: 60px;\n`;","import { useState, useEffect } from \"react\";\nimport { useParams} from 'react-router-dom'\n\nimport {fetchCastById} from 'services/API'\nimport STATUS from 'services/status'\nimport imageReplace from '../../../images/poster-not-found.jpg'\n\nimport {  Content, ImgBox,  Item, List,  Value} from './Cast.styled'\nimport Loader from '../../../components/Loader/Loader'\n\n\nconst Cast = () => {\n    const [movies, setMovies] = useState([]);\n    const [status, setStatus] = useState(STATUS.idle);\n    const {movieId} =useParams()\n\n    useEffect (()=>{\n        const getMovies = async query => {\n            setStatus(STATUS.pending)\n            try {\n               const data =await fetchCastById(movieId)\n               onResolve(data) \n            } catch (error) {\n                console.log(error);\n                setStatus(STATUS.error); \n            }\n        }\n        getMovies(movieId)\n    }, [movieId])\n    \n    const onResolve = data => {\n        const movie = data.map(({ cast_id, profile_path, character, name }) => ({\n            id: cast_id,\n            img: profile_path,\n            character: character,\n            name :name\n        }));\n        setMovies(movie);\n        setStatus(STATUS.success);\n    }\n\n    return(\n        <>\n        {status === STATUS.pending && <Loader />}\n        {status === STATUS.success && movies.length ===0 ? (<p>Not information</p>) :\n        (\n          <List>\n            {movies.map(({id, img, character, name })=>(\n                <Item key={id}>\n<ImgBox>\n\t\t\t{img ? (\n\t\t\t\t\t\t\t\t<img src={`https://image.tmdb.org/t/p/w500`+ img} alt={name} width={115} height={175} />\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t<img src={imageReplace} alt=\"Plug\" width={115} height={175} />\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</ImgBox>\n\t\t\t\t\t\t<Content>\t\t\t\t\t\t\n\t\t\t\t\t\t\t<List>\n\t\t\t\t\t\t\t\t<Item>\n\t\t\t\t\t\t\t\t\t<Value>{name}</Value>\n\t\t\t\t\t\t\t\t</Item>\n\t\t\t\t\t\t\t\t<Item>\t\n\t\t\t\t\t\t\t\t<Value>Ð¡haracter: {character}</Value>\n\t\t\t\t\t\t\t\t</Item>\n\t\t\t\t\t\t\t</List>\t\t\t\t\t\t\n\t\t\t\t\t\t</Content>\n                </Item>\n            ))}\n          </List>  \n        )\n    }\n     </>\n    )\n }\nexport default Cast","import axios from 'axios';\n\nconst API_KEY = 'b52f4a97df843a5ead1cf8ccfba387fd';\nconst moviesApi = axios.create({\n\tbaseURL: 'https://api.themoviedb.org/3/',\n});\n\nexport const fetchTrendingMovies = async () => {\n\tconst {\n\t\tdata: { results },\n\t} = await moviesApi.get(`trending/movie/day`, {\n\t\tparams: {\n\t\t\tapi_key: API_KEY,\n\t\t},\n\t});\n\treturn results;\n};\n\n\nexport const fetchSearchMovies = async searchName => {\n\tconst {\n\t\tdata: { results },\n\t} = await moviesApi.get(`search/movie`, {\n\t\tparams: {\n\t\t\tapi_key: API_KEY,\n\t\t\tquery: searchName,\n\t\t},\n\t});\n\treturn results;\n};\n\nexport const fetchMovieDetailsById = async movieId => {\n\tconst { data } = await moviesApi.get(`movie/${movieId}`, {\n\t\tparams: {\n\t\t\tapi_key: API_KEY,\n\t\t},\n\t});\n\treturn data;\n};\n\nexport const fetchCastById = async movieId => {\n\tconst {\n\t\tdata: { cast },\n\t} = await moviesApi.get(`movie/${movieId}/credits`, {\n\t\tparams: {\n\t\t\tapi_key: API_KEY,\n\t\t},\n\t});\n\treturn cast;\n};\n\nexport const fetchReviewsById = async movieId => {\n\tconst {\n\t\tdata: { results },\n\t} = await moviesApi.get(`movie/${movieId}/reviews`, {\n\t\tparams: {\n\t\t\tapi_key: API_KEY,\n\t\t},\n\t});\n\treturn results;\n};","const STATUS = {\n    idle: 'idle',\n    pending: 'pending',\n    success: 'success',\n    error: 'error',\n  };\n\n  export default STATUS"],"names":["ImgBox","styled","Content","List","Item","Value","useState","movies","setMovies","STATUS","status","setStatus","movieId","useParams","useEffect","getMovies","query","fetchCastById","data","onResolve","console","log","movie","map","id","cast_id","img","profile_path","character","name","Loader","length","src","alt","width","height","imageReplace","API_KEY","moviesApi","axios","baseURL","fetchTrendingMovies","get","params","api_key","results","fetchSearchMovies","searchName","fetchMovieDetailsById","cast","fetchReviewsById","idle","pending","success","error"],"sourceRoot":""}